diff -Naur a/backends/cards/cards-job.cpp b/backends/cards/cards-job.cpp
--- a/backends/cards/cards-job.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/cards-job.cpp	2023-06-05 14:32:31.351578569 +0200
@@ -0,0 +1,51 @@
+#include "cards-job.h"
+
+CardsJob::CardsJob(PkBackendJob *job) :
+	m_cache(nullptr),
+	m_job(job),
+	m_cancel(false)
+{
+}
+CardsJob::~CardsJob()
+{
+	delete m_cache;
+}
+bool CardsJob::init()
+{
+	m_cache = new Pkgdbh("CardsJob");
+
+	if (m_cache->getListOfPackageName().size() > 0)
+		return true;
+
+	return false;
+}
+void CardsJob::cancel()
+{
+    if (!m_cancel) {
+        m_cancel = true;
+        pk_backend_job_set_status(m_job, PK_STATUS_ENUM_CANCEL);
+    }
+
+    if (m_child_pid > 0) {
+        kill(m_child_pid, SIGTERM);
+    }
+}
+
+bool CardsJob::cancelled() const
+{
+	return m_cancel;
+}
+
+PkBackendJob *CardsJob::pkJob() const
+{
+	return m_job;
+}
+bool CardsJob::matchPackage(const std::string& PackageName, PkBitfield filters)
+{
+	return true;
+}
+void CardsJob::refreshCache()
+{
+	pk_backend_job_set_status(m_job, PK_STATUS_ENUM_REFRESH_CACHE);
+}
+// vim:set ts=2 :
diff -Naur a/backends/cards/cards-job.h b/backends/cards/cards-job.h
--- a/backends/cards/cards-job.h	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/cards-job.h	2023-06-05 14:33:57.129980859 +0200
@@ -0,0 +1,61 @@
+/* cards-job.h  - Interface to Cards
+ *
+ * Copyright (c) 2023 Thiery Nuttens <tnut@nutyx.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#pragma once
+
+#include <libcards.h>
+
+#include <pk-backend.h>
+
+class CardsJob
+{
+public:
+	CardsJob(PkBackendJob *job);
+	~CardsJob();
+
+	bool init();
+	void cancel();
+	bool cancelled() const;
+
+	/**
+	  * Returns the PackageKit backend job associated with this CARDS job.
+	*/
+	PkBackendJob *pkJob() const;
+
+	/**
+	  * Check if a given package matches the filters
+	  *  @return true if it passed the filters
+	  */
+	bool matchPackage(const std::string &PackageName, PkBitfield filters);
+
+	/**
+	  * Refreshes the sources of packages
+	  */
+	void refreshCache();
+
+
+
+private:
+	Pkgdbh *m_cache;
+	PkBackendJob *m_job;
+	bool	m_cancel;
+	pid_t m_child_pid;
+};
+// vim:set ts=2 :
diff -Naur a/backends/cards/meson.build b/backends/cards/meson.build
--- a/backends/cards/meson.build	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/meson.build	2023-06-05 14:30:55.220035626 +0200
@@ -0,0 +1,25 @@
+add_languages('cpp')
+
+cpp_compiler = meson.get_compiler('cpp')
+
+cards_dep = meson.get_compiler('c').find_library('cards')
+
+shared_module(
+  'pk_backend_cards',
+  'pk-backend-cards.cpp',
+  'cards-job.cpp',
+  'cards-job.h',
+  include_directories: packagekit_src_include,
+  dependencies: [
+    packagekit_glib2_dep,
+    cards_dep,
+    gmodule_dep,
+  ],
+  cpp_args: [
+    '-DPK_COMPILATION',
+    '-DG_LOG_DOMAIN="PackageKit-Cards"',
+  ],
+  override_options: ['cpp_std=c++17'],
+  install: true,
+  install_dir: pk_plugin_dir,
+)
diff -Naur a/backends/cards/pk-backend-cards.cpp b/backends/cards/pk-backend-cards.cpp
--- a/backends/cards/pk-backend-cards.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/pk-backend-cards.cpp	2023-06-05 14:34:15.999629376 +0200
@@ -0,0 +1,285 @@
+/* pk-backend-cards.cpp
+ *
+ * Copyright (C) 2007-2014 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2023 Thierry Nuttens <tnut@nutyx.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include <stdlib.h>
+
+#include <pk-backend.h>
+#include <packagekit-glib2/pk-debug.h>
+
+#include <libcards.h>
+
+#include "cards-job.h"
+
+typedef struct {
+	gboolean	 has_signature;
+	gboolean	 repo_enabled_dev;
+	gboolean	 repo_enabled_man;
+	gboolean	 repo_enabled_doc;
+	gboolean	 updated_gtkhtml;
+	gboolean	 updated_kernel;
+	gboolean	 updated_powertop;
+	gboolean	 use_blocked;
+	gboolean	 use_distro_upgrade;
+	gboolean	 use_eula;
+	gboolean	 use_gpg;
+	gboolean	 use_media;
+	gchar		**package_ids;
+	gchar		**values;
+	PkBitfield	 filters;
+	gboolean	 fake_db_locked;
+} PkBackendCardsPrivate;
+
+static PkBackendCardsPrivate *priv;
+
+void
+pk_backend_initialize (GKeyFile *conf, PkBackend *backend)
+{
+
+	priv = g_new0 (PkBackendCardsPrivate, 1);
+	priv->repo_enabled_man = TRUE;
+	priv->repo_enabled_doc = FALSE;
+	priv->repo_enabled_dev = FALSE;
+}
+
+void
+pk_backend_destroy (PkBackend *backend)
+{
+	g_free (priv);
+	g_debug("Cards backend being destroyed");
+}
+
+PkBitfield
+pk_backend_get_groups (PkBackend *backend)
+{
+	return pk_bitfield_from_enums (PK_GROUP_ENUM_DOCUMENTATION,
+		PK_GROUP_ENUM_DESKTOP_KDE,
+		PK_GROUP_ENUM_DESKTOP_XFCE,
+		PK_GROUP_ENUM_DESKTOP_GNOME,
+		PK_GROUP_ENUM_DESKTOP_OTHER,
+		-1);
+}
+
+PkBitfield
+pk_backend_get_filters (PkBackend *backend)
+{
+	return pk_bitfield_from_enums (PK_FILTER_ENUM_BASENAME,
+		PK_FILTER_ENUM_GUI,
+		PK_FILTER_ENUM_APPLICATION,
+		PK_FILTER_ENUM_INSTALLED,
+		PK_FILTER_ENUM_NOT_INSTALLED,
+		PK_FILTER_ENUM_DEVELOPMENT,
+		-1);
+}
+
+gchar **
+pk_backend_get_mime_types (PkBackend *backend)
+{
+	const gchar *mime_types[] = {
+				"application/x-xz-compressed-tar",
+				NULL };
+	return g_strdupv ((gchar **) mime_types);
+}
+
+void
+pk_backend_cancel (PkBackend *backend, PkBackendJob *job)
+{
+    auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data(job));
+    if (cards) {
+        /* try to cancel the thread */
+        g_debug ("cancelling transaction");
+        cards->cancel();
+    }
+}
+
+void
+pk_backend_get_files (PkBackend *backend, PkBackendJob *job, gchar **package_ids)
+{
+
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_get_updates (PkBackend *backend, PkBackendJob *job, PkBitfield filters)
+{
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data(job));
+	if(!cards->init()) {
+		g_debug("Failed to create CARDS cache");
+		return;
+	}
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+	pk_backend_job_set_percentage (job, PK_BACKEND_PERCENTAGE_INVALID);
+	/* check network state */
+	if (!pk_backend_is_online (backend)) {
+		pk_backend_job_error_code (job, PK_ERROR_ENUM_NO_NETWORK, "Cannot check when offline");
+		pk_backend_job_finished (job);
+		return;
+	}
+}
+
+
+void
+pk_backend_install_packages (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags, gchar **package_ids)
+{
+}
+
+void
+pk_backend_remove_packages (PkBackend *backend, PkBackendJob *job,
+			    PkBitfield transaction_flags,
+			    gchar **package_ids,
+			    gboolean allow_deps,
+			    gboolean autoremove)
+{
+
+	pk_backend_job_set_locked (job, TRUE);
+
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_REMOVE);
+	pk_backend_job_finished (job);
+
+	/* unlock backend again */
+	pk_backend_job_set_locked (job, FALSE);
+}
+
+
+void
+pk_backend_search_details (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+}
+
+void
+pk_backend_search_files (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+	pk_backend_job_set_allow_cancel (job, TRUE);
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_search_groups (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+	pk_backend_job_set_allow_cancel (job, TRUE);
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_search_names (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+	pk_backend_job_set_percentage (job, PK_BACKEND_PERCENTAGE_INVALID);
+	pk_backend_job_set_allow_cancel (job, TRUE);
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+
+}
+
+void
+pk_backend_get_repo_list (PkBackend *backend, PkBackendJob *job, PkBitfield filters)
+{
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_QUERY);
+	pk_backend_job_repo_detail (job, "doc",
+				    "Documentation packages", priv->repo_enabled_doc);
+	pk_backend_job_repo_detail (job, "man",
+				    "Man pages packages", priv->repo_enabled_man);
+	if (!pk_bitfield_contain (filters, PK_FILTER_ENUM_NOT_DEVELOPMENT)) {
+		pk_backend_job_repo_detail (job, "dev",
+					    "Development packages",
+					    priv->repo_enabled_dev);
+	}
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_repo_enable (PkBackend *backend, PkBackendJob *job, const gchar *rid, gboolean enabled)
+{
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_REQUEST);
+
+	if (g_strcmp0 (rid, "doc") == 0) {
+		g_debug ("documentation repo: %i", enabled);
+		priv->repo_enabled_doc = enabled;
+	} else if (g_strcmp0 (rid, "dev") == 0) {
+		g_debug ("development repo: %i", enabled);
+		priv->repo_enabled_dev = enabled;
+	} else if (g_strcmp0 (rid, "man") == 0) {
+		g_debug ("man pages repo: %i", enabled);
+		priv->repo_enabled_man = enabled;
+	} else {
+		g_warning ("unknown repo: %s", rid);
+	}
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_download_packages (PkBackend *backend, PkBackendJob *job, gchar **package_ids, const gchar *directory)
+{
+
+	pk_backend_job_set_status (job, PK_STATUS_ENUM_DOWNLOAD);
+
+	pk_backend_job_finished (job);
+}
+
+
+
+void
+pk_backend_repair_system (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags)
+{
+	pk_backend_job_finished (job);
+}
+
+void
+pk_backend_start_job (PkBackend *backend, PkBackendJob *job)
+{
+
+	/* create private state for this job */
+	auto cards = new CardsJob(job);
+
+	/* you can use pk_backend_job_error_code() here too */
+	pk_backend_job_set_user_data (job, cards);
+}
+
+void
+pk_backend_stop_job (PkBackend *backend, PkBackendJob *job)
+{
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data (job));
+
+	if (cards)
+		delete cards;
+
+	pk_backend_job_set_user_data (job, NULL);
+}
+
+gboolean
+pk_backend_supports_parallelization (PkBackend *backend)
+{
+	return FALSE;
+}
+
+const gchar *
+pk_backend_get_description (PkBackend *backend)
+{
+	return "Cards backend";
+}
+
+const gchar *
+pk_backend_get_author (PkBackend *backend)
+{
+	return "Thierry Nuttens <tnut@nutyx.org>";
+}
+// vim:set ts=2 :
diff -Naur a/etc/PackageKit.conf b/etc/PackageKit.conf
--- a/etc/PackageKit.conf	2022-12-01 19:47:48.000000000 +0100
+++ b/etc/PackageKit.conf	2023-06-02 23:40:45.845320481 +0200
@@ -9,7 +9,7 @@
 # The order they are specified is the order they are tried, so for the
 # value "foo,bar" first "foo" will be attempted and then "bar" if the
 # libpk_backend_foo.so module load failed.
-#DefaultBackend=auto
+DefaultBackend=cards
 
 # Unlock the backend after this many seconds idle.
 #BackendShutdownTimeout=5
