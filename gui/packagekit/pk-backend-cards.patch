diff -Naur a/backends/cards/cards-job.cpp b/backends/cards/cards-job.cpp
--- a/backends/cards/cards-job.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/cards-job.cpp	2023-06-08 09:01:42.027237868 +0200
@@ -0,0 +1,112 @@
+#include "cards-job.h"
+
+#include <iostream>
+#include <sstream>
+#include <memory>
+#include <fstream>
+#include <dirent.h>
+
+CardsJob::CardsJob(PkBackendJob *job) :
+	m_cache(nullptr),
+	m_job(job),
+	m_cancel(false)
+{
+}
+CardsJob::~CardsJob()
+{
+	delete m_cache;
+}
+bool CardsJob::init()
+{
+	m_cache = new Pkgdbh;
+
+	if (m_cache->getListOfPackagesNames().size() > 0)
+		return true;
+
+	return false;
+}
+void CardsJob::cancel()
+{
+    if (!m_cancel) {
+        m_cancel = true;
+        pk_backend_job_set_status(m_job, PK_STATUS_ENUM_CANCEL);
+    }
+
+    if (m_child_pid > 0) {
+        kill(m_child_pid, SIGTERM);
+    }
+}
+
+bool CardsJob::cancelled() const
+{
+	return m_cancel;
+}
+
+PkBackendJob *CardsJob::pkJob() const
+{
+	return m_job;
+}
+std::set<std::string> CardsJob::resolvePackageIds(const gchar **package_ids, PkBitfield filters)
+{
+	g_debug("resolvePackgesIds");
+
+	return m_cache->getListOfPackagesNames();
+}
+
+bool CardsJob::matchPackage(const std::string& PackageName, PkBitfield filters)
+{
+	return true;
+}
+void CardsJob::refreshCache()
+{
+	pk_backend_job_set_status(m_job, PK_STATUS_ENUM_REFRESH_CACHE);
+}
+void CardsJob::emitPackageFiles(const gchar *pi)
+{
+	using namespace std;
+	GPtrArray *files;
+	string line;
+
+	g_auto(GStrv) parts = pk_package_id_split(pi);
+	string fName;
+	fName = "/var/lib/pkg/DB/" + string(parts[PK_PACKAGE_ID_NAME]) + "/files";
+
+	if (checkFileExist(fName)) {
+		ifstream in(fName.c_str());
+		if (!in != 0) {
+			return;
+		}
+
+		files = g_ptr_array_new_with_free_func(g_free);
+		while (in.eof() == false) {
+			getline(in, line);
+			if (!line.empty()) {
+				g_ptr_array_add(files, g_strdup(line.c_str()));
+			}
+		}
+
+		if (files->len) {
+			g_ptr_array_add(files, NULL);
+			pk_backend_job_files(m_job, pi, (gchar **) files->pdata);
+		}
+		g_ptr_array_unref(files);
+	}
+}
+void CardsJob::emitPackages(std::set<std::string> listOfPackages, PkBitfield filters, PkInfoEnum state, bool multiversion)
+{
+
+	g_debug("emitPackages started");
+
+	for (auto p:listOfPackages) {
+		if(m_cancel)
+			break;
+		std::string d = m_cache->getDescription(p);
+		std::string v = m_cache->getVersion(p);
+		std::string a = m_cache->getArch(p);
+		std::string c = m_cache->getCollection(p);
+		std::string pi = p + ";" + v + ";" + a + ";" + c;
+		g_debug("Package: %s", pi.c_str());
+		pk_backend_job_package(m_job, PK_INFO_ENUM_INSTALLED, pi.c_str(), d.c_str());
+	}
+}
+// vim:set ts=2 :
diff -Naur a/backends/cards/cards-job.h b/backends/cards/cards-job.h
--- a/backends/cards/cards-job.h	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/cards-job.h	2023-06-07 15:44:11.134710192 +0200
@@ -0,0 +1,84 @@
+/* cards-job.h  - Interface to Cards
+ *
+ * Copyright (c) 2023 Thiery Nuttens <tnut@nutyx.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#pragma once
+
+#include <libcards.h>
+
+#include <pk-backend.h>
+
+class CardsJob
+{
+public:
+	CardsJob(PkBackendJob *job);
+	~CardsJob();
+
+	bool init();
+	void cancel();
+	bool cancelled() const;
+
+	/**
+	  * Returns the PackageKit backend job associated with this CARDS job.
+	*/
+	PkBackendJob *pkJob() const;
+
+	/**
+	  * Tries to find a list of packages mathing the package ids
+	  *  @returns a list of set of string, if the list is empty no package was found
+	  */
+	std::set<std::string> resolvePackageIds(const gchar **package_ids, PkBitfield filters = PK_FILTER_ENUM_NONE);
+	/**
+	  * Check if a given package matches the filters
+	  *  @return true if it passed the filters
+	  */
+	bool matchPackage(const std::string &PackageName, PkBitfield filters);
+
+	/**
+	  * Refreshes the sources of packages
+	  */
+	void refreshCache();
+
+	/**
+	  *  Emits the files of a package
+	  */
+	void emitPackageFiles(const gchar *pi);
+
+	/**
+	  *  Emits the files of a package
+	  */
+	void emitPackageFilesLocal(const gchar *pi);
+
+
+	/**
+		* Emit a list of packages that matches the given filters
+	  */
+	void emitPackages(std::set<std::string>,
+		PkBitfield filters = PK_FILTER_ENUM_NONE,
+		PkInfoEnum state = PK_INFO_ENUM_UNKNOWN,
+		bool multiversion = false);
+
+
+private:
+	Pkgdbh *m_cache;
+	PkBackendJob *m_job;
+	bool	m_cancel;
+	pid_t m_child_pid;
+};
+// vim:set ts=2 :
diff -Naur a/backends/cards/meson.build b/backends/cards/meson.build
--- a/backends/cards/meson.build	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/meson.build	2023-06-07 14:22:21.870230554 +0200
@@ -0,0 +1,29 @@
+add_languages('cpp')
+
+cpp_compiler = meson.get_compiler('cpp')
+
+archive_dep = meson.get_compiler('c').find_library('libarchive')
+curl_dep = meson.get_compiler('c').find_library('curl')
+cards_dep = meson.get_compiler('c').find_library('cards')
+
+shared_module(
+  'pk_backend_cards',
+  'pk-backend-cards.cpp',
+  'cards-job.cpp',
+  'cards-job.h',
+  include_directories: packagekit_src_include,
+  dependencies: [
+    packagekit_glib2_dep,
+    archive_dep,
+    curl_dep,
+    cards_dep,
+    gmodule_dep,
+  ],
+  cpp_args: [
+    '-DPK_COMPILATION',
+    '-DG_LOG_DOMAIN="PackageKit-Cards"',
+  ],
+  override_options: ['c_std=c11','cpp_std=c++17'],
+  install: true,
+  install_dir: pk_plugin_dir,
+)
diff -Naur a/backends/cards/pk-backend-cards.cpp b/backends/cards/pk-backend-cards.cpp
--- a/backends/cards/pk-backend-cards.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/backends/cards/pk-backend-cards.cpp	2023-06-07 18:27:47.473882867 +0200
@@ -0,0 +1,212 @@
+/* pk-backend-cards.cpp
+ *
+ * Copyright (C) 2007-2014 Richard Hughes <richard@hughsie.com>
+ * Copyright (C) 2023 Thierry Nuttens <tnut@nutyx.org>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include <stdlib.h>
+
+#include <pk-backend.h>
+#include <packagekit-glib2/pk-debug.h>
+
+#include <libcards.h>
+
+#include "cards-job.h"
+
+const gchar * pk_backend_get_description (PkBackend *backend)
+{
+	return "Cards backend";
+}
+
+const gchar * pk_backend_get_author (PkBackend *backend)
+{
+	return "Thierry Nuttens <tnut@nutyx.org>";
+}
+
+gboolean pk_backend_supports_parallelization (PkBackend *backend)
+{
+	return FALSE;
+}
+
+void pk_backend_initialize (GKeyFile *conf, PkBackend *backend)
+{
+	pk_debug_add_log_domain (G_LOG_DOMAIN);
+	pk_debug_add_log_domain ("CARDS");
+}
+
+void pk_backend_destroy (PkBackend *backend)
+{
+	g_debug("Cards backend being destroyed");
+}
+
+PkBitfield pk_backend_get_groups (PkBackend *backend)
+{
+	return pk_bitfield_from_enums (PK_GROUP_ENUM_DOCUMENTATION,
+		PK_GROUP_ENUM_DESKTOP_KDE,
+		PK_GROUP_ENUM_DESKTOP_XFCE,
+		PK_GROUP_ENUM_DESKTOP_GNOME,
+		PK_GROUP_ENUM_DESKTOP_OTHER,
+		-1);
+}
+
+PkBitfield pk_backend_get_filters (PkBackend *backend)
+{
+	return pk_bitfield_from_enums (PK_FILTER_ENUM_BASENAME,
+		PK_FILTER_ENUM_GUI,
+		PK_FILTER_ENUM_APPLICATION,
+		PK_FILTER_ENUM_INSTALLED,
+		PK_FILTER_ENUM_NOT_INSTALLED,
+		PK_FILTER_ENUM_DEVELOPMENT,
+		-1);
+}
+
+gchar ** pk_backend_get_mime_types (PkBackend *backend)
+{
+	const gchar *mime_types[] = {
+				"application/x-xz-compressed-tar",
+				NULL };
+	return g_strdupv ((gchar **) mime_types);
+}
+
+void pk_backend_start_job (PkBackend *backend, PkBackendJob *job)
+{
+
+	/* create private state for this job */
+	auto cards = new CardsJob(job);
+
+	/* you can use pk_backend_job_error_code() here too */
+	pk_backend_job_set_user_data (job, cards);
+}
+
+void pk_backend_stop_job (PkBackend *backend, PkBackendJob *job)
+{
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data (job));
+
+	if (cards)
+		delete cards;
+
+	pk_backend_job_set_user_data (job, NULL);
+}
+
+void pk_backend_cancel (PkBackend *backend, PkBackendJob *job)
+{
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data(job));
+	if (cards) {
+		/* try to cancel the thread */
+		g_debug ("cancelling transaction");
+		cards->cancel();
+	}
+}
+
+static void
+backend_get_files_thread(PkBackendJob *job, GVariant *params, gpointer user_data)
+{
+	gchar **package_ids;	// List of packages
+	gchar *pi;	// Package installed
+
+	g_variant_get(params, "(^a&s)",
+		&package_ids);
+
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data(job));
+	if (!cards->init()) {
+		g_debug("Failed to create cards cache");
+		return;
+	}
+	pk_backend_job_set_status(job, PK_STATUS_ENUM_QUERY);
+	for (uint i = 0; i < g_strv_length(package_ids); ++i) {
+		pi = package_ids[i];
+		cards->emitPackageFiles(pi);
+	}
+}
+
+void pk_backend_get_files(PkBackend *backend, PkBackendJob *job, gchar **package_ids)
+{
+	pk_backend_job_thread_create(job, backend_get_files_thread, NULL, NULL);
+}
+static void
+pk_backend_resolve_thread(PkBackendJob *job, GVariant *params, gpointer user_data)
+{
+	g_debug("pk_backend_resolve_tread started");
+
+	const gchar **search;
+	PkBitfield filters;
+
+	g_variant_get(params, "(t^a&s)",
+		&filters,
+		&search);
+	pk_backend_job_set_allow_cancel(job, true);
+
+	auto cards = static_cast<CardsJob*>(pk_backend_job_get_user_data(job));
+	if (!cards->init()) {
+		g_debug("Failed to initialize CARDS job");
+		return;
+	}
+	std::set<std::string> ListOfPackages = cards->resolvePackageIds(search);
+	
+	cards->emitPackages(ListOfPackages, filters,PK_INFO_ENUM_UNKNOWN, true);
+}
+void
+pk_backend_resolve (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **package_ids)
+{
+	pk_backend_job_thread_create(job, pk_backend_resolve_thread, NULL, NULL);
+}
+void pk_backend_install_packages (PkBackend *backend, PkBackendJob *job, PkBitfield transaction_flags, gchar **package_ids)
+{
+}
+
+void pk_backend_remove_packages (PkBackend *backend, PkBackendJob *job,
+			    PkBitfield transaction_flags,
+			    gchar **package_ids,
+			    gboolean allow_deps,
+			    gboolean autoremove)
+{
+}
+PkBitfield pk_backend_get_roles(PkBackend *backend)
+{
+	PkBitfield roles;
+	roles = pk_bitfield_from_enums(
+                PK_ROLE_ENUM_CANCEL,
+                PK_ROLE_ENUM_GET_DETAILS,
+                PK_ROLE_ENUM_GET_FILES,
+                PK_ROLE_ENUM_RESOLVE,
+                -1);
+
+	return roles;
+}
+
+void pk_backend_search_details (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+}
+
+void pk_backend_search_files (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+}
+
+void pk_backend_search_groups (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+}
+
+void pk_backend_search_names (PkBackend *backend, PkBackendJob *job, PkBitfield filters, gchar **values)
+{
+}
+
+void pk_backend_download_packages (PkBackend *backend, PkBackendJob *job, gchar **package_ids, const gchar *directory)
+{
+}
+// vim:set ts=2 :
diff -Naur a/etc/PackageKit.conf b/etc/PackageKit.conf
--- a/etc/PackageKit.conf	2022-12-01 19:47:48.000000000 +0100
+++ b/etc/PackageKit.conf	2023-06-07 13:46:00.390969073 +0200
@@ -9,13 +9,13 @@
 # The order they are specified is the order they are tried, so for the
 # value "foo,bar" first "foo" will be attempted and then "bar" if the
 # libpk_backend_foo.so module load failed.
-#DefaultBackend=auto
+DefaultBackend=cards
 
 # Unlock the backend after this many seconds idle.
 #BackendShutdownTimeout=5
 
 # Shut down the daemon after this many seconds idle. 0 means don't shutdown.
-#ShutdownTimeout=300
+ShutdownTimeout=5
 
 # Keep the packages after they have been downloaded
 #KeepCache=false
